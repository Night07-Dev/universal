--[[
	Локальный скрипт для создания перетаскиваемой кнопки,
	которая открывает и закрывает консоль разработчика Roblox.
	
	ИСПРАВЛЕННАЯ ВЕРСИЯ: Корректно работает на мобильных устройствах,
	отслеживая окончание перетаскивания глобально.
]]

-- Получаем необходимые сервисы
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")

-- Переменные для отслеживания состояния
local isDragging = false      -- Перетаскивается ли кнопка в данный момент
local consoleVisible = false  -- Видна ли консоль в данный момент
local dragStartPos = nil      -- Начальная позиция курсора/пальца при перетаскивании
local buttonStartPos = nil    -- Начальная позиция кнопки при перетаскивании
local dragThreshold = 10      -- Увеличим порог для сенсорных экранов, чтобы избежать случайных кликов

-- Создание GUI
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ConsoleToggleGui"
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.ResetOnSpawn = false -- Позиция кнопки будет сохраняться после смерти персонажа
screenGui.Parent = playerGui

-- Создание кнопки
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ConsoleToggleButton"
toggleButton.Text = "C"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 24
toggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
toggleButton.BorderColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.BorderSizePixel = 2
toggleButton.AutoButtonColor = false -- Отключаем автоматическое изменение цвета при наведении/нажатии

-- Размер и начальная позиция кнопки
toggleButton.Size = UDim2.fromOffset(45, 45) -- Немного увеличим для удобства на мобильных
toggleButton.Position = UDim2.new(1, -55, 1, -55) -- 55 пикселей от правого и нижнего края
toggleButton.AnchorPoint = Vector2.new(1, 1)

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = toggleButton

toggleButton.Parent = screenGui

-- --- Логика работы ---

-- Функция для переключения видимости консоли
local function toggleConsole()
	consoleVisible = not consoleVisible
	StarterGui:SetCore("DevConsoleVisible", consoleVisible)
end

-- Событие, когда пользователь НАЖИМАЕТ на кнопку (это наш стартовый триггер)
toggleButton.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		isDragging = true
		dragStartPos = input.Position
		buttonStartPos = toggleButton.Position
		-- Слегка изменим вид кнопки при нажатии
		toggleButton.BackgroundColor3 = Color3.fromRGB(110, 110, 110)
	end
end)

-- Событие, которое отслеживает ОТПУСКАНИЕ кнопки мыши или пальца В ЛЮБОМ МЕСТЕ ЭКРАНА
-- Это ключевое исправление для мобильных устройств
UserInputService.InputEnded:Connect(function(input)
	-- Проверяем, был ли активен режим перетаскивания
	if isDragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
		isDragging = false
		-- Возвращаем кнопке обычный цвет
		toggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
		
		-- Проверяем, было ли это перетаскивание или просто клик
		local dragDistance = (input.Position - dragStartPos).Magnitude
		if dragDistance < dragThreshold then
			toggleConsole()
		end
	end
end)

-- Событие, которое отслеживает ДВИЖЕНИЕ мыши или пальца по экрану
UserInputService.InputChanged:Connect(function(input)
	-- Проверяем, что мы в режиме перетаскивания и что тип ввода - это движение
	if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		local delta = input.Position - dragStartPos
		
		-- Рассчитываем новую позицию кнопки
		-- Используем UDim2.fromOffset для простоты, т.к. мы не используем Scale
		local newPosition = UDim2.fromOffset(
			buttonStartPos.X.Offset + delta.X,
			buttonStartPos.Y.Offset + delta.Y
		)
		
		-- Ограничиваем позицию кнопки, чтобы она не выходила за пределы экрана
		local screenBounds = screenGui.AbsoluteSize
		local buttonSize = toggleButton.AbsoluteSize
		
		-- Используем math.clamp для ограничения
		local newX = math.clamp(newPosition.X.Offset, 0, screenBounds.X - buttonSize.X)
		local newY = math.clamp(newPosition.Y.Offset, 0, screenBounds.Y - buttonSize.Y)
		
		toggleButton.Position = UDim2.fromOffset(newX, newY)
	end
end)
