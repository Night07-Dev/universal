--[[
	Скрипт: AutoParody v5 (Финальная версия с Raycast-прыжком)
	Автор: GPT-4
	Задача: Персонаж пародирует случайного игрока, меняя цель каждые 5 секунд.
	Дополнительно: Если путь к цели преграждает стена, персонаж прыгает.
]]

--==============================================================================
-- СЕРВИСЫ (Services)
--==============================================================================
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

--==============================================================================
-- КОНФИГУРАЦИЯ (Configuration)
--==============================================================================
-- ВАЖНО: Замените '123456789' на ID вашего плейса.
local TARGET_PLACE_ID = 116495829188952

local TARGET_CHANGE_INTERVAL = 5
local JUMP_ON_COLLISION_ENABLED = true
local WALL_JUMP_COOLDOWN = 0.75 -- Сделаем кулдаун чуть меньше для отзывчивости
local RAY_DISTANCE = 3 -- Длина луча для проверки стены (в стадах)

--==============================================================================
-- ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ (Local Variables)
--==============================================================================
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local currentTarget = nil
local movementConnection, jumpConnection, deathConnection = nil, nil, nil
local canWallJump = true

-- Параметры для луча, чтобы он игнорировал нашего и целевого персонажа
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Exclude

--==============================================================================
-- ПРОВЕРКА УСЛОВИЙ (Initial Check)
--==============================================================================
if game.PlaceId ~= TARGET_PLACE_ID then
	script:Destroy()
	return
end

--==============================================================================
-- ФИНАЛЬНЫЙ МОДУЛЬ: ЛОГИКА ПРЫЖКА ЧЕРЕЗ RAYCAST
--==============================================================================
if JUMP_ON_COLLISION_ENABLED then
	RunService.Heartbeat:Connect(function()
		-- Проверяем, можно ли прыгать, есть ли цель и находится ли персонаж на земле
		local currentState = humanoid:GetState()
		if not canWallJump or not currentTarget or not (currentState == Enum.HumanoidStateType.Running or currentState == Enum.HumanoidStateType.Landed) then
			return
		end
		
		local targetRootPart = currentTarget:FindFirstChild("HumanoidRootPart")
		if not targetRootPart then return end

		-- 1. Определяем направление к цели (только по горизонтали)
		local origin = rootPart.Position
		local direction = (targetRootPart.Position - origin) * Vector3.new(1, 0, 1)

		-- Если цель очень близко, не стреляем лучом
		if direction.Magnitude < 1 then return end

		-- 2. Пускаем луч
		local raycastResult = Workspace:Raycast(origin, direction.Unit * RAY_DISTANCE, raycastParams)
		
		-- 3. Если луч во что-то попал - это препятствие
		if raycastResult then
			-- Проверяем, что это не часть пола, а именно стена (по нормали)
			-- Угол > 30 градусов от вертикали считается стеной
			if math.abs(raycastResult.Normal.Y) < 0.85 then
				humanoid.Jump = true
				canWallJump = false
				
				task.spawn(function()
					task.wait(WALL_JUMP_COOLDOWN)
					canWallJump = true
				end)
			end
		end
	end)
end

--==============================================================================
-- ОСНОВНЫЕ ФУНКЦИИ (Core Functions)
--==============================================================================

local function cleanupConnections()
	if movementConnection then movementConnection:Disconnect() end
	if jumpConnection then jumpConnection:Disconnect() end
	if deathConnection then deathConnection:Disconnect() end
	movementConnection, jumpConnection, deathConnection = nil, nil, nil
	
	if humanoid and humanoid.Health > 0 then
		humanoid:MoveTo(rootPart.Position)
	end
end

local function startParodying()
	if not currentTarget or not currentTarget:IsDescendantOf(Workspace) then return end
	
	-- Обновляем фильтр для луча, чтобы он игнорировал новую цель
	raycastParams.FilterDescendantsInstances = {character, currentTarget}
	
	local targetRootPart = currentTarget:FindFirstChild("HumanoidRootPart")
	local currentTargetHumanoid = currentTarget:FindFirstChildOfClass("Humanoid")

	if not targetRootPart or not currentTargetHumanoid then return end

	movementConnection = RunService.Heartbeat:Connect(function()
		if currentTarget and targetRootPart and targetRootPart.Parent then
			humanoid:MoveTo(targetRootPart.Position)
		else
			cleanupConnections()
		end
	end)

	jumpConnection = currentTargetHumanoid.StateChanged:Connect(function(oldState, newState)
		if newState == Enum.HumanoidStateType.Jumping then
			humanoid.Jump = true
		end
	end)

	deathConnection = currentTargetHumanoid.Died:Connect(function()
		cleanupConnections()
	end)
end

local function findAndSwitchTarget()
	local previousTarget = currentTarget
	cleanupConnections()

	local potentialTargets = {}
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			if player.Character ~= previousTarget then
				table.insert(potentialTargets, player.Character)
			end
		end
	end
	
	if #potentialTargets == 0 then
		for _, player in ipairs(Players:GetPlayers()) do
			if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
				table.insert(potentialTargets, player.Character)
			end
		end
	end

	if #potentialTargets > 0 then
		currentTarget = potentialTargets[math.random(1, #potentialTargets)]
		startParodying()
	else
		currentTarget = nil
		raycastParams.FilterDescendantsInstances = {character} -- Если целей нет, игнорируем только себя
	end
end

--==============================================================================
-- ЗАПУСК СКРИПТА (Execution)
--==============================================================================
raycastParams.FilterDescendantsInstances = {character} -- Изначально игнорируем только себя
while task.wait(TARGET_CHANGE_INTERVAL) do
	if not character or not character.Parent then break end
	findAndSwitchTarget()
end
